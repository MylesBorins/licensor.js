#!/usr/bin/env node
var fs = require('fs')
var path = require('path')
var nopt = require('nopt')

var options = nopt(
  { version: Boolean },
  { v: [ '--version' ] },
  process.argv, 2)

if (options.version) {
  process.stdout.write(require('./package.json').version + '\n')
  process.exit(0) }

var cwd = process.cwd()

var packageJSON = path.join(cwd, 'package.json')
try {
  fs.accessSync(packageJSON, fs.R_OK) }
catch (error) {
  process.stderr.write('Cannot read package.json')
  process.exit(1) }

var packageData = fs.readFileSync(packageJSON)

var json
try {
  json = JSON.parse(packageData) }
catch (error) {
  process.stderr.write('Invalid package.json')
  process.exit(1) }

require('normalize-package-data')(json)

var patternLicenses = [
  '0BSD',
  'BSD-2-Clause',
  'BSD-3-Clause',
  'ISC',
  'MIT',
  'WTFPL' ]

var fixedLicenses = [
  'Apache-2.0',
  'GPL-3.0' ]

var license = json.license

if (!license || typeof license !== 'string') {
  process.stderr.write('No license property')
  process.exit(1) }

var packagePrefix = false

if (patternLicenses.indexOf(license) > -1) {
  packagePrefix = 'jslicense-' }
else if (fixedLicenses.indexOf(license) > -1) {
  packagePrefix = '' }

if (packagePrefix === false) {
  process.stderr.write('Unsupported license')
  process.exit(1) }

var licensePath  = path.join(cwd, 'LICENSE')

fs.writeFileSync(
  licensePath,
  licenseText(license.toLowerCase()))

if (license === 'Apache-2.0') {
  fs.writeFileSync(
    path.join(cwd, 'NOTICE'),
    ( fieldFromPackage('name', json) + '\n' +
      'Copyright (c) ' + fieldFromPackage('year', json) +
      ' ' + fieldFromPackage('owners', json) ) ) }

function licenseText(id) {
  if (packagePrefix === 'jslicense-') {
    return require(packagePrefix + license.toLowerCase())
      .map(function(lineArray) {
        return lineArray.reduce(
          function(line, lineItem) {
            if (typeof lineItem === 'string') {
              return line + lineItem
            } else {
              return (
                line +
                fieldFromPackage(
                  lineItem.field,
                  json,
                  lineItem.default) ) } },
          '') })
      .join('\n\n') }
  else {
    return require(id) } }

function fieldFromPackage(field, package/*, defaultValue */) {
  if (field === 'name') {
    return package.name }
  else if (field === 'owners') {
    return package.author.name }
  else if (field === 'year') {
    return new Date()
      .getFullYear()
      .toString() } }
